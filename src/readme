Необходимо разработать консольное приложение на Java, которое бы
выполняло следующие функции ниже.

Пользователь должен иметь возможность запускать консольную утилиту с
командой и параметрами. В зависимости от заданной команды приложение
выполняет определенную операцию.

1. Чтение списка локальных дисков и вывод их на экран, без сетевых, но
включая флешки и CD/DVD.
Пользователь задает только команду (например MyUtility.jar -readDrives)
===>
===>
===> Исходя из того, что удалось нагуглить, задача ставится для решения только для
===> OS Microsoft.
===> Для реализации под Win можно использовать:
===>    1. WMI Class / Win32_LogicalDisk class: DriveType
===>                                            Data type: uint32
===>                                            Access type: Read-only
===>                                            Qualifiers: MappingStrings ("Win32API|FileFunctions|GetDriveType")
===>                                            Numeric value that corresponds to the type of disk drive this logical disk represents.
===>                                                 Unknown (0)
===>                                                 No Root Directory (1)
===>                                                 Removable Disk (2)
===>                                                 Local Disk (3)
===>                                                 Network Drive (4)
===>                                                 Compact Disc (5)
===>                                                 RAM Disk (6)
===>    2. Проверять вызовом net use (https://gist.github.com/digulla/31eed31c7ead29ffc7a30aaf87131def)
===>    3. Гипотетически можно получить S.M.A.R.T, но это уже совсем))) + это прокатит только для HDD & SSD.
===>        !Но, это можно использовать и в unix. Правда возникает вопрос скорости фильтрации
===>
===>
2. Поиск файла по его имени: полное совпадение, частичное совпадение
(имя файла содержит заданное сочетание символов). Вывод на экран в
консоль найденных файлов.

Пользователь задает команду, абсолютный путь поиска и часть имени или
полное имя файла.
===>
===>
===> Думаю, что стоит уточнить надо ли выполнять поиск файлов с помощью регулярных выражений.
===>
===>
3. Изменение найденных файлов. Необходимо сначала вывести на экран
найденный файл, и добавить произвольную строчку в начало каждого
найденного файла, т.е. изменить найденный файл и перезаписать (или
записать копию рядом).
===>
===>
===> Мне не очень нравится метод writeFile(String fileUrl, String text). Он слишком грамоздкий и его сложно тестировать.
===> Думаю, что его по хорошему надо отрефакторить, но уже потрачено все разумное время на код.
===> Плюс добавить тест на множественное изменение
===>

Достаточно открывать и модифицировать только текстовые файлы. Бинарные
менять не нужно.

Пользователь задает команду, абсолютный путь поиска и часть имени или
полное имя файла.
===>
===> Считаю, что не хватает валидации параметров для каждого типа операции.
===> Но! Уже потрачено слишком много времени
===>